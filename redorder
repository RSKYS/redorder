#!/bin/sh

# Copyright 2025, Pouria Rezaei <Pouria.rz@outlook.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License at <http://www.gnu.org/licenses/> for
# more details.

# The script is EFI only

set -e

if [ "$(id -u)" -ne 0 ]; then
    echo "This script must be run as root."
    exit 1
fi

if ! command -v wget >/dev/null 2>&1; then
	echo "This script requires wget."
	exit 1
fi

if ! command -v docker >/dev/null 2>&1; then
	echo "This script requires docker."
	exit 1
fi

if ! command -v rsync >/dev/null 2>&1 ; then
	echo "rsync required to install extracted Slackware tree."
	exit 1
fi

extract_bootstrap_and_prepare() {
	rm -rf /slackware64
	mkdir -p /slackware64

	# Extract bootstrap from Docker
	docker pull aclemons/slackware:current
	docker create --name slak_tmp aclemons/slackware:current
	docker export slak_tmp -o /bootstrap.tar
	docker rm -f slak_tmp
	docker rmi aclemons/slackware:current
	tar -xpf /bootstrap.tar -C /slackware64
	rm -f /bootstrap.tar

	if [ -f /etc/resolv.conf ]; then
		cp -L /etc/resolv.conf /slackware64/etc/resolv.conf
	else
		echo "nameserver 1.1.1.1" > /slackware64/etc/resolv.conf
	fi

	# Mounts inspired from somewhere
	mount -t proc proc /slackware64/proc -o nosuid,noexec,nodev 2>/dev/null
	mount -t sysfs sys /slackware64/sys -o nosuid,noexec,nodev,ro 2>/dev/null
	mount -t devtmpfs udev /slackware64/dev -o mode=0755,nosuid 2>/dev/null
	mkdir -p /slackware64/dev/pts /slackware64/dev/shm /slackware64/run /slackware64/tmp
	mount -t devpts devpts /slackware64/dev/pts -o mode=0620,gid=5,nosuid,noexec 2>/dev/null
	mount -t tmpfs shm /slackware64/dev/shm -o mode=1777,nosuid,nodev 2>/dev/null
	mount -t tmpfs run /slackware64/run -o nosuid,nodev,mode=0755 2>/dev/null
	mount -t tmpfs tmp /slackware64/tmp -o mode=1777,strictatime,nodev,nosuid 2>/dev/null

	rm -f /slackware64/etc/mtab
	sed 's/\/slackware64\//\//' /etc/mtab \
		> /slackware64/etc/mtab
}

chroot_exec() {
	chroot /slackware64 /bin/sh -c "$*"
}

# Doing shits in chroot
configure_chroot() {
	cp -f /etc/fstab /slackware64/etc/fstab
	cp -f /etc/default/grub /slackware64/etc/default/grub
	cat >/slackware64/slackware_install_all.sh <<-CHC
		#!/bin/sh
		BASE_LINK="https://slackware.uk/slackware/slackware64-current/slackware64"

		DL_DIR="a ap d l n k t tcl x y"

		( cd /tmp
		for DIS in \$DL_DIR; do
			TMP_GET=\$(wget --no-check-certificate -O- "\$BASE_LINK/\$DIS" | grep '.asc' | \
				sed  's/.*href="\([^"]*\.asc\)".*/\1/p' | sed 's/.asc//g' | sort -fu)
			for DAT in \$TMP_GET; do
				wget --no-check-certificate --content-disposition -q "\$BASE_LINK/\$DIS/\$DAT"
				upgradepkg --terse --reinstall --install-new "\$DAT" || exit 1
				rm -f "\$DAT"
			done
		done )
		unset BASE_LINK DL_DIR
	CHC

	until chroot_exec "/bin/sh /slackware_install_all.sh"; do
		echo "Trying again..."
		sleep 5
		rm -rf /slackware64/tmp/*
	done

	rm -f /slackware64/slackware_install_all.sh

	if [ -d /slackware64/etc/rc.d ]; then
		for srv in rc.S rc.M rc.local rc.inet1 ; do
			if [ -f /slackware64/etc/rc.d/$srv ]; then
				chmod +x /slackware64/etc/rc.d/$srv
			fi
		done
	fi

	if [ -f /slackware64/etc/rc.d/rc.sshd ]; then
		chmod +x /slackware64/etc/rc.d/rc.sshd
	fi

	unset srv
}

save_root_pass() {
	if [ -r /etc/shadow ]; then
		grep '^root:' /etc/shadow > /slackware64/root.passwd
		chmod 0600 /slackware64/root.passwd
	fi
}

backup_old_files() {
	cp -fL /etc/hostname /etc/localtime /slackware64/etc/ 2>/dev/null
	if [ -d /etc/ssh ]; then
		mkdir -p /slackware64/ssh
		cp -Lp /etc/ssh/ssh_host* /slackware64/ssh 2>/dev/null
	fi
	if [ -d /root/.ssh ]; then
		cp -Lpr /root/.ssh /slackware64/key 2>/dev/null
	fi
}

un_mount() {
	for mn in $(awk '$2 != "/" &&
		$2 !~ /^\/(boot|efi|dev|sys|slackware64|proc|var\/lib\/docker|var\/lib\/containerd)/ {print $2}' \
		/proc/mounts | sort -r)
	do
		umount -l "$mn" 2>/dev/null || true
	done
	unset mn
}

overwrite_current() {
	un_mount
	rsync -aHAX --numeric-ids --delete-after \
		--exclude=/dev/** --exclude=/proc/** --exclude=/sys/** \
		--exclude=/slackware64/** --exclude=/efi/** --exclude=/boot/efi/** \
		/slackware64/ /
}


restore_root_pass() {
	if [ -f /slackware64/root.passwd ] ; then
		if grep -Eq '^root:[^$]+' /slackware64/root.passwd; then
			sed -i '/^root:/d' /etc/shadow 2>/dev/null
			cat /slackware64/root.passwd >> /etc/shadow 2>/dev/null
		else
			echo "root:0v3rk1ll" | chpasswd
		fi
	fi
}

cleanup() {
	awk "/\/slackware64/ {print \$2}" /proc/mounts | sort -r | xargs -r umount -nl 2>/dev/null
	rm -rf /slackware64
}

configure_network() {
    ## TODO: Tring to recall libs in not gonna cut it.
	dev=$(ls /sys/class/net 2>/dev/null | grep -v lo | head -n1)
	ipaddr=$(ip -4 addr show dev "$dev" | awk '($1=="inet"){print $2; exit}')
	gateway=$(ip -4 route show default 2>/dev/null | awk '{print $3; exit}')
	conffile=/etc/rc.d/rc.inet1.conf

	if [ -n "$ipaddr" ]; then
		cidr=$(echo "$ipaddr" | awk -F/ '{print $2}')
		if [ -n "$cidr" ]; then
			netmask=$(awk -v p="$cidr" 'BEGIN{
				if (p=="") { print ""; exit }
				mask=0xffffffff; mask = mask ^ ((1 << (32-p)) - 1)
				printf "%d.%d.%d.%d", rshift(mask,24)&255, rshift(mask,16)&255, rshift(mask,8)&255, mask&255
			}
			function rshift(x,n){ for(i=0;i<n;i++) x=int(x/2); return x }')
		else
			netmask=""
		fi
		cat > "$conffile" <<-EOF
			# Auto-generated minimal rc.inet1.conf
			IPADDR[${dev}]="${ipaddr}"
			NETMASK[${dev}]="${netmask}"
			USE_DHCP="yes"
		EOF
	else
		cat > "$conffile" <<-EOF
			# Auto-generated minimal rc.inet1.conf
			IPADDR[${dev}]="dhcp"
			USE_DHCP="yes"
		EOF
	fi

	chmod +x /etc/rc.d/rc.inet1 2>/dev/null

	if [ -f /etc/rc.d/rc.sshd ]; then
		chmod +x /etc/rc.d/rc.sshd 2>/dev/null
	fi

	unset dev ipaddr gateway conffile netmask
}

configure_bootloader() {
	root_dev=$(findmnt -no SOURCE / 2>/dev/null)
	needs_lvm2=0

	if findmnt /efi >/dev/null 2>&1; then
		umount -l /efi
		rm -rf /efi
		sed 's/\/efi/\/boot\/efi/' /etc/fstab \
			> /etc/fstab
		mkdir -p /boot/efi
	fi

	case $root_dev in
	/dev/mapper/*) needs_lvm2=1 ;;
	esac

	if [ $needs_lvm2 -eq 1 ] && [ -f /etc/lvm/lvm.conf ]; then
		sed -i.bak 's/use_lvmetad = 1/use_lvmetad = 0/g' /etc/lvm/lvm.conf 2>/dev/null
	fi

	mount -a || true
	rm -rf /boot/efi/*

	$(/usr/share/mkinitrd/mkinitrd_command_generator.sh -k $(ls /lib/modules) | grep 'mkinitrd -c')
	grub-install --force --removable --target=x86_64-efi --efi-directory=/boot/efi
	grub-mkconfig -o /boot/grub/grub.cfg 2>/dev/null

	if [ -f /etc/lvm/lvm.conf.bak ]; then
		mv /etc/lvm/lvm.conf.bak /etc/lvm/lvm.conf 2>/dev/null
	fi

	unset root_dev needs_lvm2
}

finalize() {
	if [ -d /etc/ssh/sshd_config.d ]; then
		printf "PermitRootLogin yes\nPasswordAuthentication yes\n" > /etc/ssh/sshd_config.d/50-Slackware.conf
	else
		if grep -q '^#PermitRootLogin' /etc/ssh/sshd_config 2>/dev/null; then
			sed -i '/^#PermitRootLogin\s/s/.*/PermitRootLogin yes/' /etc/ssh/sshd_config 2>/dev/null
		else
			grep -q '^PermitRootLogin' /etc/ssh/sshd_config 2>/dev/null || printf "PermitRootLogin yes\n" >> /etc/ssh/sshd_config
		fi
	fi
	if [ -d /etc/rc.d ]; then
		chmod +x /etc/rc.d/rc.S /etc/rc.d/rc.M /etc/rc.d/rc.local 2>/dev/null
	fi

	cat <<-EOF
	Hey there,
	This machine has been squashed with new distro.
	
	Recommended actions (on the VM host console):
	  # sync ; reboot -f

	After reboot you should be able to login as root with your original root
	password (or '0v3rk1ll' if no root password was found and a fallback was used).
	EOF
}

if [ "$#" -ne 0 ]; then
    printf "Parameters are not defined in this script yet.\n"
    exit 1
fi

cd /
extract_bootstrap_and_prepare
configure_chroot
save_root_pass
backup_old_files
overwrite_current
restore_root_pass
cleanup
configure_network
configure_bootloader
finalize
